import asyncio
import os
import json
import sys

from telethon import TelegramClient, events, Button
from rss_parser import NewsFetcher
from tg_parser import TelegramParser

import logging
import shutil

import gpt_style_translation

API_ID = 00000000
API_HASH = 'ADD API_HASH'
BOT_TOKEN = 'ADD BOT TOKEN'

LINKAGES_FILE = 'resources.json'
PASSWORD_FILE = 'password.txt'
user_states = {}
authenticated_users = set()

CHECK_INTERVAL = 10

client = TelegramClient('bot_session', API_ID, API_HASH).start(bot_token=BOT_TOKEN)

rss_fetcher = NewsFetcher()
telegram_parser = TelegramParser(API_ID, API_HASH)

logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot_debug.log", encoding="utf-8"),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)


def load_password():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞—Ä–æ–ª—å –∏–∑ —Ñ–∞–π–ª–∞ password.txt."""
    try:
        with open(PASSWORD_FILE, 'r', encoding='utf-8') as f:
            password = f.read().strip()
        logger.info("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        return password
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞—Ä–æ–ª—å –∏–∑ {PASSWORD_FILE}: {e}")
        sys.exit(1)


def load_linkages():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–≤—è–∑–æ–∫ –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    logger.debug("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤—è–∑–æ–∫ –∏–∑ JSON —Ñ–∞–π–ª–∞.")
    if not os.path.exists(LINKAGES_FILE) or os.stat(LINKAGES_FILE).st_size == 0:
        logger.info(f"{LINKAGES_FILE} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π.")
        with open(LINKAGES_FILE, 'w', encoding='utf-8') as f:
            json.dump({"linkages": {}}, f, ensure_ascii=False, indent=4)
        return {"linkages": {}}

    try:
        with open(LINKAGES_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            if "linkages" not in data:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'linkages'.")
            logger.debug(f"–°–≤—è–∑–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {data}")
            return data
    except (json.JSONDecodeError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {LINKAGES_FILE}: {e}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞.")
        with open(LINKAGES_FILE, 'w', encoding='utf-8') as f:
            json.dump({"linkages": {}}, f, ensure_ascii=False, indent=4)
        return {"linkages": {}}


def save_linkages(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–≤—è–∑–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ –≤ JSON —Ñ–∞–π–ª —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏."""
    logger.debug("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö —Å–≤—è–∑–æ–∫ –≤ JSON —Ñ–∞–π–ª.")
    try:

        if os.path.exists(LINKAGES_FILE):
            backup_file = LINKAGES_FILE + ".bak"
            shutil.copy(LINKAGES_FILE, backup_file)
            logger.debug(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è {LINKAGES_FILE} —Å–æ–∑–¥–∞–Ω–∞ –∫–∞–∫ {backup_file}")

        with open(LINKAGES_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        logger.debug(f"–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ —Å–≤—è–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {data}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤—è–∑–∫–∏ –≤ {LINKAGES_FILE}: {e}")

        backup_file = LINKAGES_FILE + ".bak"
        if os.path.exists(backup_file):
            shutil.copy(backup_file, LINKAGES_FILE)
            logger.debug(f"{LINKAGES_FILE} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.")


def is_moderation_chat(chat_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–π —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º –¥–ª—è –∫–∞–∫–æ–π-–ª–∏–±–æ —Å–≤—è–∑–∫–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π, –∏–Ω–∞—á–µ False.
    """
    data = load_linkages()
    for linkage in data["linkages"].values():
        if linkage.get("moderation_bot") == chat_id:
            return True
    return False


async def moderate_news():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π."""
    while True:
        data = load_linkages()
        linkages = data.get("linkages", {})

        for linkage_name, linkage_data in linkages.items():
            if not linkage_data.get("is_active", False):
                continue

            if not linkage_data.get("moderation_bot"):
                logger.warning(f"–°–≤—è–∑–∫–∞ '{linkage_name}' –Ω–µ –∏–º–µ–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            if not linkage_data.get("publication_channel"):
                logger.warning(f"–°–≤—è–∑–∫–∞ '{linkage_name}' –Ω–µ –∏–º–µ–µ—Ç –∫–∞–Ω–∞–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            try:
                resources = linkage_data.get("resources", [])
                if not resources:
                    logger.warning(f"–ù–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —Å–≤—è–∑–∫–∏ {linkage_name}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                    continue

                for resource in resources:
                    url = resource.get("url")
                    if "rss" in url or "feed" in url:
                        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º RSS –∫–∞–Ω–∞–ª: {url}")
                        rss_news = rss_fetcher.fetch_new_rss_news([url], f"rss_db_{linkage_name}.csv")
                        for news in rss_news:
                            await send_to_moderation(news, linkage_name, linkage_data["moderation_bot"])

                    elif "t.me" in url:
                        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Telegram-–∫–∞–Ω–∞–ª: {url}")
                        tg_news = await telegram_parser.fetch_new_telegram_news([url], f"tg_db_{linkage_name}.csv")
                        for news in tg_news:
                            await send_to_moderation(news, linkage_name, linkage_data["moderation_bot"])

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤—è–∑–∫–∏ '{linkage_name}': {e}")

        await asyncio.sleep(CHECK_INTERVAL)


async def send_to_moderation(news, linkage_name, moderation_group_link):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –≤ –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —á–∞—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        news (dict): –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, –≤–∫–ª—é—á–∞—è —Ç–µ–∫—Å—Ç, –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å), –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ —Ç.–¥.
        linkage_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Å–≤—è–∑–∫–∏.
        moderation_group_link (str): –°—Å—ã–ª–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —á–∞—Ç.
    """
    try:
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ ID {news['id']} –≤ –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —á–∞—Ç {moderation_group_link}.")

        data = load_linkages()
        linkages = data["linkages"]
        linkage = linkages.get(linkage_name)

        if not linkage:
            logger.warning(f"–°–≤—è–∑–∫–∞ '{linkage_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        pending_news = linkage.get("pending_news", [])
        if not any(n.get("id") == news["id"] for n in pending_news):
            pending_news.append(news)
            linkage["pending_news"] = pending_news
            save_linkages(data)
            logger.debug(f"–ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ pending_news –¥–ª—è —Å–≤—è–∑–∫–∏ '{linkage_name}'.")

        text = f"üì∞ **–ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏:**\n\n{news['txt'][:500]}"
        buttons = [
            [Button.inline("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", f"accept:{news['id']}:{linkage_name}")],
            [Button.inline("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", f"reject:{news['id']}:{linkage_name}")]
        ]

        if news.get("img"):
            img_path = news["img"]

            if os.path.exists(img_path):
                try:

                    await client.send_file(
                        moderation_group_link,
                        file=img_path,
                        caption=text,
                        buttons=buttons,
                        parse_mode='md'
                    )
                    logger.info(f"–ù–æ–≤–æ—Å—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —á–∞—Ç {moderation_group_link}.")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

                    await client.send_message(
                        moderation_group_link,
                        text,
                        buttons=buttons,
                        parse_mode='md'
                    )
            else:
                logger.warning(f"–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {img_path}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                await client.send_message(
                    moderation_group_link,
                    text,
                    buttons=buttons,
                    parse_mode='md'
                )
        else:

            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ ID {news['id']} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            await client.send_message(
                moderation_group_link,
                text,
                buttons=buttons,
                parse_mode='md'
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {e}")


@client.on(events.CallbackQuery(pattern=r"^(accept|reject):(\d+):(.+)$"))
async def handle_moderation_action(event):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –≤ –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö).
    """
    if not is_moderation_chat(event.chat_id):
        logger.warning(f"–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ {event.chat_id} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
        await event.answer("‚ùå –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ —Å–≤—è–∑–∞–Ω —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π.", alert=True)
        return

    chat_id = event.chat_id
    user_id = event.sender_id
    data = load_linkages()
    linkage_name = None

    for name, linkage in data["linkages"].items():
        if linkage.get("moderation_bot") == chat_id:
            linkage_name = name
            break

    if not linkage_name:
        return

    await process_moderation_action(event, linkage_name)


async def process_moderation_action(event, linkage_name):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏: –ø—Ä–∏–Ω—è—Ç–∏–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        event: –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ CallbackQuery.
        linkage_name: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤—è–∑–∫–∏.
    """
    try:

        action, news_id, linkage_name = event.data.decode().split(":")
        logger.info(f"–î–µ–π—Å—Ç–≤–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {action}, –Ω–æ–≤–æ—Å—Ç—å ID: {news_id}, —Å–≤—è–∑–∫–∞: {linkage_name}")

        data = load_linkages()
        linkages = data["linkages"]
        linkage = linkages.get(linkage_name)

        if not linkage:
            logger.warning(f"–°–≤—è–∑–∫–∞ '{linkage_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await event.answer("‚ùå –°–≤—è–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", alert=True)
            return

        if event.chat_id != linkage.get("moderation_bot"):
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏–∑ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ {event.chat_id} –¥–ª—è —Å–≤—è–∑–∫–∏ '{linkage_name}'.")
            await event.answer("‚ùå –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.", alert=True)
            return

        pending_news = linkage.get("pending_news", [])
        news = next((n for n in pending_news if str(n["id"]) == news_id), None)

        if not news:
            logger.warning(f"–ù–æ–≤–æ—Å—Ç—å —Å ID {news_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–≤—è–∑–∫–µ '{linkage_name}'.")
            await event.answer("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", alert=True)
            return

        if action == "accept":

            await publish_news(news, linkage["publication_channel"])
            new_text = f"‚úÖ **–ù–æ–≤–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.**\n\n**–¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:**\n{news['txt'][:300]}\n\n–ò—Å—Ç–æ—á–Ω–∏–∫: {news['src']}"
        else:
            new_text = f"‚ùå **–ù–æ–≤–æ—Å—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.**\n\n**–¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:**\n{news['txt'][:300]}\n\n–ò—Å—Ç–æ—á–Ω–∏–∫: {news['src']}"

        if news.get("img") and os.path.exists(news["img"]):
            try:
                os.remove(news["img"])
                logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {news['img']} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è {action}.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {news['img']}: {e}")

        pending_news.remove(news)
        linkage["pending_news"] = pending_news
        save_linkages(data)

        await event.edit(new_text, buttons=None)

        await event.answer("‚úîÔ∏è –î–µ–π—Å—Ç–≤–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
        logger.info(f"–ù–æ–≤–æ—Å—Ç—å ID {news_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å –¥–µ–π—Å—Ç–≤–∏–µ–º: {action}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        await event.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.", alert=True)


async def publish_news(news, publication_channel_link):
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª.
    """
    try:
        logger.debug(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –Ω–æ–≤–æ—Å—Ç–∏ ID {news['id']} –≤ –∫–∞–Ω–∞–ª {publication_channel_link}.")

        data = load_linkages()
        linkage_name = next(
            (name for name, linkage in data["linkages"].items() if linkage["publication_channel"] == publication_channel_link),
            None
        )

        custom_prompt = data["linkages"].get(linkage_name, {}).get(
            "prompt",
            "Translate the following text into Azerbaijani, "
            "without prefaces, and remove various links or mentions of channels "
            "or watermarks, if text is too small do not add nothing new to it. "
            "This is text for news channels. The text needs to be made interesting and up to 1024 characters."
        )

        translated_text = await gpt_style_translation.transform_text_gpt(news['txt'], custom_prompt)

        channel_entity = await client.get_entity(publication_channel_link)

        if news.get("img") and os.path.exists(news["img"]):
            await client.send_file(
                channel_entity,
                file=news["img"],
                caption=translated_text[:1024],
                parse_mode='md'
            )
        else:
            await client.send_message(
                channel_entity,
                translated_text,
                parse_mode='md'
            )

        logger.info(f"–ù–æ–≤–æ—Å—Ç—å ID {news['id']} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ {publication_channel_link}.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")


async def manage_linkages(event):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∫–∞–º–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    user_id = event.sender_id

    if user_id not in authenticated_users:
        await event.reply("üîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:")
        user_states[user_id] = {"step": "AWAITING_PASSWORD"}
        return

    user_states[user_id] = {"current_menu": "manage_linkages"}
    logger.debug(f"User state set to manage_linkages for user {user_id}.")
    keyboard = [
        [Button.text("‚ûï Create Linkage")],
        [Button.text("‚úèÔ∏è Edit Linkage"), Button.text("üóëÔ∏è Delete Linkage")],
        [Button.text("‚¨ÖÔ∏è Back to Main Menu")],
    ]
    await event.reply("üîß Linkage Management Menu:\n\nChoose an action below to manage your linkages:", buttons=keyboard)


async def view_linkages(event):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—Å–µ–º —Å–≤—è–∑–∫–∞–º, –≤–∫–ª—é—á–∞—è –ø—Ä–æ–º–ø—Ç—ã."""
    user_id = event.sender_id

    if user_id not in authenticated_users:
        await event.reply("üîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:")
        user_states[user_id] = {"step": "AWAITING_PASSWORD"}
        return

    data = load_linkages()
    linkages = data.get("linkages", {})

    if not linkages:
        await event.reply("‚ùå –°–≤—è–∑–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    message = "üìã **–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö —Å–≤—è–∑–æ–∫:**\n\n"
    for name, details in linkages.items():
        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if details["is_active"] else "‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        publication_channel = details.get("publication_channel", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        resources = details.get("resources", [])
        resources_text = "\n".join(f"‚Ä¢ {res['url']}" for res in resources) if resources else "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"
        prompt = details.get("prompt", gpt_style_translation.default_prompt)

        message += (
            f"üîë **–ù–∞–∑–≤–∞–Ω–∏–µ —Å–≤—è–∑–∫–∏:** {name}\n"
            f"üì¢ **–ö–∞–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:** {publication_channel}\n"
            f"üîó **–†–µ—Å—É—Ä—Å—ã:**\n{resources_text}\n"
            f"üìù **–ü—Ä–æ–º–ø—Ç:**\n{prompt}\n"
            f"üìå **–°—Ç–∞—Ç—É—Å:** {status}\n\n"
        )

    await event.reply(message)


@client.on(events.ChatAction)
async def handle_bot_added_to_moderation_chat(event):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏.
    """
    bot_user = await client.get_me()
    if event.user_id == bot_user.id:
        chat_id = event.chat_id
        user_id = event.action_message.from_id.user_id
        logger.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —á–∞—Ç {chat_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}.")

        user_state = user_states.get(user_id)
        if user_state and user_state.get("step") == "AWAITING_MODERATION_CHAT":
            linkage_name = user_state["linkage_name"]
            user_states[user_id]["moderation_chat_id"] = chat_id
            user_states[user_id]["step"] = "AWAITING_PUBLICATION_CHANNEL"
            await client.send_message(
                user_id,
                f"üîë –ù–∞–∑–≤–∞–Ω–∏–µ —Å–≤—è–∑–∫–∏: **{linkage_name}**\n\n"
                "‚úÖ –ß–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –≤ –∫–æ—Ç–æ—Ä–æ–º —è —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )


@client.on(events.NewMessage)
async def handle_publication_channel(event):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∫–∏.
    """
    user_id = event.sender_id
    text = event.text.strip()

    if not event.is_private:

        if is_moderation_chat(event.chat_id):
            return
        else:
            return

    user_state = user_states.get(user_id)
    if not user_state or user_state.get("step") != "AWAITING_PUBLICATION_CHANNEL":
        return

    linkage_name = user_state["linkage_name"]
    publication_channel = text

    try:

        channel_entity = await client.get_entity(publication_channel)

        if not channel_entity.admin_rights:
            await event.reply(
                "‚ö†Ô∏è –Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
    except Exception as e:
        await event.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞: {e}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –≤–µ—Ä–Ω–∞ –∏ —è –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.")
        return

    try:
        data = load_linkages()
        data["linkages"][linkage_name] = {
            "resources": user_state["resources"],
            "moderation_bot": user_state.get("moderation_chat_id"),
            "publication_channel": publication_channel,
            "pending_news": [],
            "is_active": True
        }
        save_linkages(data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–∫–∏ '{linkage_name}': {e}")
        await event.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–≤—è–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    del user_states[user_id]
    await event.reply(
        f"üîë –ù–∞–∑–≤–∞–Ω–∏–µ —Å–≤—è–∑–∫–∏: **{linkage_name}**\n\n"
        f"‚úÖ –°–≤—è–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –ù–æ–≤–æ—Å—Ç–∏ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –±—É–¥—É—Ç –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏."
    )

    for resource in user_state["resources"]:
        url = resource.get("url")
        try:
            if "rss" in url or "feed" in url:
                rss_news = rss_fetcher.fetch_new_rss_news([url], f"rss_db_{linkage_name}.csv")
                for news in rss_news:
                    await send_to_moderation(news, linkage_name, data["linkages"][linkage_name]["moderation_bot"])
            elif "t.me" in url:
                tg_news = await telegram_parser.fetch_new_telegram_news([url], f"tg_db_{linkage_name}.csv")
                for news in tg_news:
                    await send_to_moderation(news, linkage_name, data["linkages"][linkage_name]["moderation_bot"])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–∞ '{url}' –¥–ª—è —Å–≤—è–∑–∫–∏ '{linkage_name}': {e}")


async def edit_linkage(event):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–≤—è–∑–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    user_id = event.sender_id

    if user_id not in authenticated_users:
        await event.reply("üîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:")
        user_states[user_id] = {"step": "AWAITING_PASSWORD"}
        return

    data = load_linkages()
    linkages = data.get("linkages", {})

    if not linkages:
        await event.reply("‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–≤—è–∑–æ–∫. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤—è–∑–∫—É.")
        return

    user_states[user_id] = {"step": "SELECT_LINKAGE_TO_EDIT"}
    buttons = [[Button.text(name)] for name in linkages.keys()]
    buttons.append([Button.text("‚¨ÖÔ∏è Back to Main Menu")])
    await event.reply("‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤—è–∑–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", buttons=buttons)


@client.on(events.NewMessage)
async def handle_menu_buttons(event):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã.
    """
    if not event.is_private:

        if is_moderation_chat(event.chat_id):
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ {event.chat_id} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
            return
        else:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ {event.chat_id} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
            return

    user_id = event.sender_id
    text = event.text.strip()

    user_state = user_states.get(user_id)
    if user_state and user_state.get("step") == "AWAITING_PASSWORD":
        if text == PASSWORD:

            authenticated_users.add(user_id)
            user_states.pop(user_id)
            await event.reply("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.")
            await back_to_main_menu(event)
        else:

            await event.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    if user_id not in authenticated_users:

        user_states[user_id] = {"step": "AWAITING_PASSWORD"}
        await event.reply("üîí **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:**")
        return

    if text == "üõ† Manage Linkages":
        await manage_linkages(event)
        return
    elif text == "üìã View Linkages":
        await view_linkages(event)
        return
    elif text == "‚¨ÖÔ∏è Back to Main Menu":
        await back_to_main_menu(event)
        return
    elif text == "‚ûï Create Linkage":
        user_states[user_id] = {"step": "AWAITING_LINKAGE_NAME"}
        await event.reply("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–≤—è–∑–∫–∏.")
        return
    elif text == "üóëÔ∏è Delete Linkage":
        data = load_linkages()
        linkages = data.get("linkages", {})
        if not linkages:
            await event.reply("‚ö†Ô∏è –°–≤—è–∑–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å–≤—è–∑–∫—É.")
            return

        buttons = [[Button.text(name)] for name in linkages.keys()]
        buttons.append([Button.text("‚¨ÖÔ∏è Back to Main Menu")])
        user_states[user_id] = {"step": "DELETE_LINKAGE", "allowed_linkages": list(linkages.keys())}
        await event.reply("üîë –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤—è–∑–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", buttons=buttons)
        return
    elif text == "‚úèÔ∏è Edit Linkage":
        await edit_linkage(event)
        return

    if user_state:
        if user_state.get("step") == "AWAITING_LINKAGE_NAME":
            if text in ["üõ† Manage Linkages", "üìã View Linkages", "‚ûï Create Linkage", "‚¨ÖÔ∏è Back to Main Menu"]:
                return
            data = load_linkages()
            linkage_name = text
            if linkage_name in data["linkages"]:
                await event.reply("‚ö†Ô∏è –°–≤—è–∑–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
            else:
                user_states[user_id]["step"] = "AWAITING_RESOURCES"
                user_states[user_id]["linkage_name"] = linkage_name
                await event.reply(
                    f"üîë –ù–∞–∑–≤–∞–Ω–∏–µ —Å–≤—è–∑–∫–∏: **{linkage_name}**\n\n"
                    "üîó –í–≤–µ–¥–∏—Ç–µ —Ä–µ—Å—É—Ä—Å—ã (—Å—Å—ã–ª–∫–∏ –Ω–∞ Telegram –∫–∞–Ω–∞–ª—ã –∏–ª–∏ RSS –ª–µ–Ω—Ç—ã) —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π ;.\n"
                    "–ü—Ä–∏–º–µ—Ä: https://t.me/example1; https://rss.example.com/feed"
                )
        elif user_state.get("step") == "AWAITING_RESOURCES":
            resources = [{"url": url.strip()} for url in text.split(";") if url.strip()]
            if not resources:
                await event.reply("‚ö†Ô∏è –í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            else:
                user_states[user_id]["resources"] = resources
                user_states[user_id]["step"] = "AWAITING_MODERATION_CHAT"
                linkage_name = user_state["linkage_name"]
                await event.reply(
                    f"üîë –ù–∞–∑–≤–∞–Ω–∏–µ —Å–≤—è–∑–∫–∏: **{linkage_name}**\n\n"
                    "‚úÖ –†–µ—Å—É—Ä—Å—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏. "
                    "–Ø —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –º–µ–Ω—è –¥–æ–±–∞–≤—è—Ç."
                )
        elif user_state.get("step") == "DELETE_LINKAGE":
            data = load_linkages()
            allowed_linkages = user_state.get("allowed_linkages", [])
            if text in allowed_linkages:
                linkages = data["linkages"]
                del linkages[text]
                save_linkages(data)
                user_states.pop(user_id, None)
                await event.reply(f"‚úÖ –°–≤—è–∑–∫–∞ **{text}** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
                await back_to_main_menu(event)
            elif text == "‚¨ÖÔ∏è Back to Main Menu":
                user_states.pop(user_id, None)
                await back_to_main_menu(event)
            else:
                await event.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–≤—è–∑–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        elif user_state.get("step") == "SELECT_LINKAGE_TO_EDIT":
            data = load_linkages()
            linkages = data.get("linkages", {})
            if text in linkages:
                linkage = linkages[text]
                is_active = linkage.get("is_active", True)
                toggle_action = "‚è∏Ô∏è Pause Linkage" if is_active else "‚ñ∂Ô∏è Resume Linkage"

                user_states[user_id] = {"step": "SELECT_EDIT_ACTION", "linkage_name": text}
                keyboard = [
                    [Button.text("‚ûï Add Resources"), Button.text("üóëÔ∏è Remove Resources")],
                    [Button.text("‚úèÔ∏è Edit Prompt")],
                    [Button.text(toggle_action)],
                    [Button.text("‚¨ÖÔ∏è Back to Linkage Selection")]
                ]
                await event.reply(f"‚úèÔ∏è –í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ —Å–≤—è–∑–∫—É: **{text}**\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", buttons=keyboard)
            elif text == "‚¨ÖÔ∏è Back to Main Menu":
                user_states.pop(user_id, None)
                await back_to_main_menu(event)
            else:
                await event.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–≤—è–∑–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        elif user_state.get("step") == "SELECT_EDIT_ACTION":
            linkage_name = user_state["linkage_name"]
            if text == "‚ûï Add Resources":
                user_states[user_id] = {"step": "AWAITING_RESOURCES_TO_ADD", "linkage_name": linkage_name}
                await event.reply(
                    f"‚úèÔ∏è –í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ —Å–≤—è–∑–∫—É: **{linkage_name}**.\n\n–í–≤–µ–¥–∏—Ç–µ —Ä–µ—Å—É—Ä—Å—ã —á–µ—Ä–µ–∑ ;, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å."
                )
            elif text == "‚úèÔ∏è Edit Prompt":
                user_states[user_id] = {"step": "AWAITING_PROMPT_CHANGE", "linkage_name": linkage_name}
                data = load_linkages()
                linkage = data["linkages"].get(linkage_name, {})
                current_prompt = linkage.get("prompt", gpt_style_translation.default_prompt)
                await event.reply(
                    f"‚úèÔ∏è –í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ —Å–≤—è–∑–∫—É: **{linkage_name}**.\n\n–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:\n{gpt_style_translation.default_prompt}\n\n"
                    f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π."
                )
            elif text == "üóëÔ∏è Remove Resources":
                data = load_linkages()
                linkage = data["linkages"].get(linkage_name, {})
                resources = linkage.get("resources", [])
                if not resources:
                    await event.reply("‚ö†Ô∏è –í —ç—Ç–æ–π —Å–≤—è–∑–∫–µ –Ω–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                else:
                    user_states[user_id] = {"step": "AWAITING_RESOURCE_TO_REMOVE", "linkage_name": linkage_name}
                    buttons = [[Button.text(res["url"])] for res in resources]
                    buttons.append([Button.text("‚¨ÖÔ∏è Back to Edit Menu")])
                    await event.reply(f"‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–≤—è–∑–∫–∏: **{linkage_name}**", buttons=buttons)
            elif text == "‚è∏Ô∏è Pause Linkage" or text == "‚ñ∂Ô∏è Resume Linkage":

                data = load_linkages()
                linkage = data["linkages"].get(linkage_name, {})
                linkage["is_active"] = not linkage.get("is_active", True)
                save_linkages(data)

                is_active = linkage["is_active"]
                status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if is_active else "‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
                toggle_action = "‚è∏Ô∏è Pause Linkage" if is_active else "‚ñ∂Ô∏è Resume Linkage"

                await event.reply(f"‚úÖ –°–≤—è–∑–∫–∞ **{linkage_name}** {status}.")

                keyboard = [
                    [Button.text("‚ûï Add Resources"), Button.text("üóëÔ∏è Remove Resources")],
                    [Button.text("‚úèÔ∏è Edit Prompt")],
                    [Button.text(toggle_action)],
                    [Button.text("‚¨ÖÔ∏è Back to Linkage Selection")]
                ]

                await event.reply(f"‚úèÔ∏è –í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ —Å–≤—è–∑–∫—É: **{linkage_name}**\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                                  buttons=keyboard)
            elif text == "‚¨ÖÔ∏è Back to Linkage Selection":
                user_states[user_id] = {"step": "SELECT_LINKAGE_TO_EDIT"}
                await edit_linkage(event)
            else:
                await event.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        elif user_state.get("step") == "AWAITING_RESOURCES_TO_ADD":
            linkage_name = user_state["linkage_name"]

            if text in ["‚¨ÖÔ∏è Back to Edit Menu", '‚ûï Add Resources', 'üóëÔ∏è Remove Resources', '‚úèÔ∏è Edit Linkage', '‚è∏Ô∏è Pause Linkage', '‚ñ∂Ô∏è Resume Linkage']:
                user_states[user_id] = {"step": "SELECT_EDIT_ACTION", "linkage_name": linkage_name}
                await edit_linkage(event)
                return

            resources = [{"url": url.strip()} for url in text.split(";") if url.strip()]
            if not resources:
                await event.reply("‚ö†Ô∏è –í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            else:
                data = load_linkages()
                linkage = data["linkages"].get(linkage_name, {})
                linkage["resources"].extend(resources)
                save_linkages(data)
                user_states.pop(user_id, None)
                await event.reply(f"‚úÖ –†–µ—Å—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–≤—è–∑–∫—É: **{linkage_name}**.")
                await back_to_main_menu(event)
        elif user_state.get("step") == "AWAITING_RESOURCE_TO_REMOVE":
            linkage_name = user_state["linkage_name"]
            data = load_linkages()
            linkage = data["linkages"].get(linkage_name, {})
            resources = linkage.get("resources", [])
            selected_resource = next((res for res in resources if res["url"] == text), None)
            if selected_resource:
                resources.remove(selected_resource)
                save_linkages(data)
                await event.reply(f"‚úÖ –†–µ—Å—É—Ä—Å —É–¥–∞–ª—ë–Ω: **{selected_resource['url']}**.")
                if resources:
                    buttons = [[Button.text(res["url"])] for res in resources]
                    buttons.append([Button.text("‚¨ÖÔ∏è Back to Edit Menu")])
                    await event.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–µ—Å—É—Ä—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", buttons=buttons)
                else:
                    user_states.pop(user_id, None)
                    await back_to_main_menu(event)
            elif text == "‚¨ÖÔ∏è Back to Edit Menu":
                user_states[user_id] = {"step": "SELECT_EDIT_ACTION", "linkage_name": linkage_name}
                await edit_linkage(event)
            else:
                await event.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ—Å—É—Ä—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        elif user_state.get("step") == "AWAITING_PROMPT_CHANGE":
            linkage_name = user_state["linkage_name"]

            if text in ["‚¨ÖÔ∏è Back to Linkage Selection", '‚ûï Add Resources', 'üóëÔ∏è Remove Resources', '‚úèÔ∏è Edit Prompt', '‚è∏Ô∏è Pause Linkage']:
                user_states[user_id] = {"step": "SELECT_EDIT_ACTION", "linkage_name": linkage_name}
                await edit_linkage(event)
                return

            if text.startswith('/'):
                return

            data = load_linkages()
            linkage = data["linkages"].get(linkage_name)
            if not linkage:
                await event.reply("‚ö†Ô∏è –°–≤—è–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                user_states.pop(user_id, None)
                return

            linkage["prompt"] = text
            save_linkages(data)

            await event.reply(f"‚úÖ –ü—Ä–æ–º–ø—Ç –¥–ª—è —Å–≤—è–∑–∫–∏ **{linkage_name}** —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
            user_states[user_id] = {"step": "SELECT_EDIT_ACTION", "linkage_name": linkage_name}
            await edit_linkage(event)


async def back_to_main_menu(event):
    user_id = event.sender_id
    user_states.pop(user_id, None)
    keyboard = [
        [Button.text("üõ† Manage Linkages")],
        [Button.text("üìã View Linkages")],
    ]
    await event.reply("ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:", buttons=keyboard)


@client.on(events.NewMessage(pattern='/start'))
async def start(event):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –µ—ë –≤ –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö.
    """
    if not event.is_private:

        if is_moderation_chat(event.chat_id):
            logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ {event.chat_id} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞.")
            return
        return

    user_id = event.sender_id

    if user_id in authenticated_users:

        keyboard = [
            [Button.text("üõ† Manage Linkages")],
            [Button.text("üìã View Linkages")],
        ]
        await event.respond(
            "ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞!**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            buttons=keyboard
        )
    else:

        user_states[user_id] = {"step": "AWAITING_PASSWORD"}
        await event.respond(
            "üîí **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:**"
        )


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    try:
        await client.start()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")

        if user_states:
            logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_states}")

        await asyncio.gather(client.run_until_disconnected(), moderate_news())
    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.")


PASSWORD = load_password()

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())